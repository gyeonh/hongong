{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPt72wuh0l7hmDaO4EFQhAC"
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    },
    "gpuClass": "standard"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "# 1. 나의 첫 머신러닝"
      ],
      "metadata": {
        "id": "jlSBUjpUPq8U"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# 1.1 인공지능과 머신러닝, 딥러닝"
      ],
      "metadata": {
        "id": "mve8R9YgqCKc"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "* 인공지능이란?<br>\n",
        "사람처럼 학습하고 추론할 수 있는 지능을 가진 컴퓨터 시스템을 만드는 기술\n",
        "\n",
        "* 머신러닝이란?<br>\n",
        "규칙을 일일이 프로그래밍하지 않아도 자동으로 데이터에서 규칙을 학습하는 알고리즘을 연구하는 분야(ML ⊆ AI)\n",
        "\n",
        "* 사이킷런(Scikit-learn)<br>\n",
        "    - 대표적인 머신러닝 (오픈소스) 라이브러리\n",
        "    - 파이썬 API 사용\n",
        "        - API: 응용프로그램이 사용가능하도록 운영 체제나 프로그래밍 언어가 제공하는 기능을 제어할 수 있게 하는 인터페이스\n",
        "        - 인터페이스: 컴퓨터 시스템끼리 정보를 공유하는 공유 경계\n",
        " \n",
        "* 딥러닝<br>\n",
        "머신러닝 알고리즘 중, 인공 신경망(Artificial neural network)을 기반으로 한 방법 (DL ⊆ ML ⊆ AI)\n",
        "\n",
        "* 텐서플로 / 파이토치<br>\n",
        "    - 대표적인 딥러닝 (오픈소스) 라이브러리\n",
        "    - 파이썬 API 사용\n",
        "    - 인공 신경망 알고리즘을 전문으로 다룸"
      ],
      "metadata": {
        "id": "9-KUhuYXrahH"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# 1.3 마켓과 머신러닝"
      ],
      "metadata": {
        "id": "M3wnz5Jq2gyX"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "보통 프로그램은 '누군가 정해준 기준대로 일'을 하지만 머신러닝은 누구도 알려주지 않는 기준을 찾아서 일을 한다."
      ],
      "metadata": {
        "id": "rDFHtGrm3YX7"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "생선이 도미인지 빙어인지를 구분하기 위해 길이와 무게라는 특성을 이용한다.\n",
        "> 특성(feature): 데이터의 특징"
      ],
      "metadata": {
        "id": "kf9s4B3z4fxD"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {
        "id": "y8O_uVDFp7GM"
      },
      "outputs": [],
      "source": [
        "# bream: 도미\n",
        "bream_length = [25.4, 26.3, 26.5, 29.0, 29.0, 29.7, 29.7, 30.0, 30.0, 30.7, 31.0, 31.0, \n",
        "                31.5, 32.0, 32.0, 32.0, 33.0, 33.0, 33.5, 33.5, 34.0, 34.0, 34.5, 35.0, \n",
        "                35.0, 35.0, 35.0, 36.0, 36.0, 37.0, 38.5, 38.5, 39.5, 41.0, 41.0]\n",
        "bream_weight = [242.0, 290.0, 340.0, 363.0, 430.0, 450.0, 500.0, 390.0, 450.0, 500.0, 475.0, 500.0, \n",
        "                500.0, 340.0, 600.0, 600.0, 700.0, 700.0, 610.0, 650.0, 575.0, 685.0, 620.0, 680.0, \n",
        "                700.0, 725.0, 720.0, 714.0, 850.0, 1000.0, 920.0, 955.0, 925.0, 975.0, 950.0]"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "길이와 무게, 두 특성을 그래프로 표현해보자\n",
        "> 산점도 그래프(scatter plot)<br>\n",
        "x, y축으로 이루어진 좌표계에 두 변수(x, y)의 관계를 표현하는 방법"
      ],
      "metadata": {
        "id": "ZZ41Vuff6FY-"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "plt.scatter(bream_length, bream_weight)\n",
        "plt.title('Bream')\n",
        "plt.xlabel('length')    # x축 이름\n",
        "plt.ylabel('weight')    # y축 이름\n",
        "plt.show()  # 그래프를 화면에 출력"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 295
        },
        "id": "ULr03H0m4ecr",
        "outputId": "fc7c7b6f-9898-4f07-e416-7ab1e14295e5"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "위의 그래프는 특성이 두개이기 때문에 2차원 그래프이다. 이렇게 산점도 그래프가 일직선에 가까운 형태를 선형적(linear)이라고 말한다.\n",
        "<br><br>\n",
        "\n",
        "\n",
        "---\n",
        "\n"
      ],
      "metadata": {
        "id": "IaM4hxNc7peo"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# smelt: 빙어\n",
        "smelt_length = [9.8, 10.5, 10.6, 11.0, 11.2, 11.3, 11.8, 11.8, 12.0, 12.2, 12.4, 13.0, 14.3, 15.0]\n",
        "smelt_weight = [6.7, 7.5, 7.0, 9.7, 9.8, 8.7, 10.0, 9.9, 9.8, 12.2, 13.4, 12.2, 19.7, 19.9]"
      ],
      "metadata": {
        "id": "NEUogxUs7I_j"
      },
      "execution_count": 6,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "plt.scatter(smelt_length, smelt_weight)\n",
        "plt.title('Smelt')\n",
        "plt.xlabel('length')    # x축 이름\n",
        "plt.ylabel('weight')    # y축 이름\n",
        "plt.show()  # 그래프를 화면에 출력"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 295
        },
        "id": "f3UeoaTj7i9A",
        "outputId": "f12f78cd-d939-4c5b-933e-1e104881f896"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "두개의 산점도 그래프를 한 화면에 나타내고 싶으면 plt.scatter() 함수를 연달아서 적어주면 된다.\n"
      ],
      "metadata": {
        "id": "ae2Y2I5e86la"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "plt.scatter(bream_length, bream_weight)\n",
        "plt.scatter(smelt_length, smelt_weight)\n",
        "plt.xlabel('length')    # x축 이름\n",
        "plt.ylabel('weight')    # y축 이름\n",
        "plt.show()  # 그래프를 화면에 출력"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 279
        },
        "id": "67acHgJq8UGf",
        "outputId": "1c451958-c787-4bdd-d42c-eafe9635eef5"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAYsAAAEGCAYAAACUzrmNAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAAaTUlEQVR4nO3df5Ac5X3n8fcHsbYX7NLyY4/ASjpxWAVFjPnhBeQj57NNgsA/gkIcbBKfZY4qXepwGYdEseSiDPE5Bw5nE6hLUYcDRi47GJmohGxzUTghF7k74LyysMTPQ4cN0logEViZC3uwiO/90c+g2WVmenZ3Zrpn5/Oq2prup5/pebpamu/081MRgZmZWSOHFF0AMzMrPwcLMzPL5WBhZma5HCzMzCyXg4WZmeU6tOgCtMPRRx8dixcvLroYZmZdZevWrS9ExGCtY3MyWCxevJiRkZGii2Fm1lUkPVPvmKuhzMwsl4OFmZnlcrAwM7NcDhZmZpbLwcLMzHK1LVhIuk3SXkmPVKUdKeleSU+l1yNSuiTdJGmnpO2Szqh6z4qU/ylJK9pVXjOzPBu2jXLOdfdx/Oofcc5197Fh22jRReqYdj5Z3A6cPyVtNbA5IpYAm9M+wAXAkvS3ErgZsuACXA2cDZwFXF0JMGZmnbRh2yhr1u9gdGycAEbHxlmzfkfPBIy2BYuIuB94cUryhcDatL0WWF6V/u3IPAgMSDoWWAbcGxEvRsRLwL28NQCZmbXd9ZueZHziwKS08YkDXL/pyYJK1FmdbrM4JiL2pO3ngGPS9hCwqyrf7pRWL/0tJK2UNCJpZN++fa0ttZn1vF+OjU8rfa4prIE7slWXWrbyUkTcEhHDETE8OFhztLqZ2YwdN9A/rfS5ptPB4vlUvUR63ZvSR4GFVfkWpLR66WZmHbVq2Yn0982blNbfN49Vy04sqESTtbvxvdPBYiNQ6dG0Ari7Kv0zqVfUUmB/qq7aBJwn6YjUsH1eSjMz66jlpw9x7UWnMDTQj4ChgX6uvegUlp9es2a8ozrR+N62iQQl3QF8EDha0m6yXk3XAeskXQY8A1ycst8DfATYCbwCXAoQES9K+g/AT1K+r0TE1EZzM7OOWH76UCmCw1SNGt9bVd62BYuIuKTOoXNr5A3g8jrnuQ24rYVFMzObUzrR+D4npyg3MyubDdtGuX7Tk/xybJzjBvpZtezElv3qP26gn9EagaGVje+e7sPMrM3a3aawatmJ9B2iSWl9h6ilje8OFmZmbdaRAX3K2Z8lBwszszZrd5vC9ZueZOLA5GFrEweipcHIwcLMrM3aPaCvEw3cDhZmZm3W7gF9nRhd7mBhZtZmzQ7om+ko7E6MLnfXWTOzEqj0mKo0hFd6TAG5XWwrx9vVNRccLMzM2q6ZQDDbUdjtHl3uaigzszZrputs2adAd7AwM2uzZgJB2adAd7AwM2uzZgJB2adAd7AwM2uzZgJBmadABzdwm5m1XbO9lco6BTo4WJiZdUSZA0EzXA1lZma5HCzMzCyXg4WZmeVysDAzs1wOFmZmlsvBwszMcrnrrJn1vA3bRts6Y+tc4GBhZj1tNlOD9xJXQ5lZT2tmRlhzsDCzHlf2qcHLwsHCzHpa2acGLwsHCzPraWWfGrws3MBtZj2tE+tXzwUOFmbW87p9RthOcDWUmZnlcrAwM7NchQQLSX8k6VFJj0i6Q9I7JB0v6SFJOyXdKeltKe/b0/7OdHxxEWU2M+tlHQ8WkoaAzwPDEfEeYB7wKeBrwA0R8W7gJeCy9JbLgJdS+g0pn5mZdVBR1VCHAv2SDgUOA/YAHwbuSsfXAsvT9oVpn3T8XEnqYFnNzHpex4NFRIwC/wl4lixI7Ae2AmMR8XrKthuodE0YAnal976e8h819bySVkoakTSyb9++9l6EmVmPKaIa6giyp4XjgeOAw4HzZ3veiLglIoYjYnhwcHC2pzMzsypFVEP9JvDziNgXERPAeuAcYCBVSwEsAEbT9iiwECAdnw/8Y2eLbGbW24oIFs8CSyUdltoezgUeA7YAn0h5VgB3p+2NaZ90/L6IiA6W18ys5xXRZvEQWUP1T4EdqQy3AF8ErpS0k6xN4tb0lluBo1L6lcDqTpfZzKzXaS7+SB8eHo6RkZGii2Fm1lUkbY2I4VrHPILbzMxyOViYmVkuBwszM8vlYGFmZrkcLMzMLJeDhZmZ5fJKeWY2Z23YNurlUlvEwcLM5qQN20ZZ9f2fMfFGNpZsdGycVd//GYADxgw4WJjZnHTNxkffDBQVE28E12x89C3Bwk8g+RwszGxOGhufaCp9w7ZR1qzfwfjEASB7AlmzfgfgJ5BqbuA2s552/aYn3wwUFeMTB7h+05MFlaic/GRhZqVy1YYd3PHQLg5EME/ikrMX8tXlp0z7PEcc1sdLr7z16eKIw/om7f9ybLzm++ul9yo/WZhZaVy1YQffefBZDqQJTg9E8J0Hn+WqDTumfa6PvvfYptKPG+ivma9eeq9ysDCz0rjjoV3TSm9kyxO1l1eemr5q2Yn0982blNbfN49Vy06c9mfOZa6GMrPSOFBnyYRa6Xk9mJqtXqq8x72hGnOwMLPSmCfVDAzzpEn7zfRgOm6gn9EaAaNW9dLy04ccHHK4GsrMSuOSsxc2ld5MD6YPnTRY81z10q0xP1mYWWlUej3l9YZqpoqp2TYLa46DhZmVyleXn5LbVbaZKiZ3iW0tV0OZWddppgeTu8S2loOFmXWd5acPce1FpzA00I+AoYF+rr3olEmN1O4S21quhjKz0qvXTbZRDyZ3iW0tBwszK7XZTPTnLrGt42ooMys1T/RXDg4WZlZq7tVUDg4WZlZq7tVUDg4WZlZq7tVUDm7gNrNSa7ZXk5dGbS8HCzMrvbxeTV4atf0cLMys9PKeGhr1mHKwaA0HCzMrtWaeGtxjqv0KaeCWNCDpLklPSHpc0vslHSnpXklPpdcjUl5JuknSTknbJZ1RRJnNbHau2rCDE9bcw+LVP+KENfc0vVRqM+Ms3GOq/YrqDXUj8HcRcRJwKvA4sBrYHBFLgM1pH+ACYEn6Wwnc3PnimtlszGZt7WaeGtxjqv06HiwkzQc+ANwKEBGvRcQYcCGwNmVbCyxP2xcC347Mg8CApNorsZtZKc1mbe1mnhqamVjQZqeINovjgX3AtySdCmwFrgCOiYg9Kc9zwDFpewio/he1O6XtqUpD0kqyJw8WLVrUtsKb2fRNZ23tqVYtO3FSmwXUfmrwPFDtVUQ11KHAGcDNEXE68E8crHICICICyP9XNPk9t0TEcEQMDw562USzMpm6hnZeejU/NZRDEU8Wu4HdEfFQ2r+LLFg8L+nYiNiTqpn2puOjQPUCvAtSmpl1iUvOXsh3Hny2Znozaj01eBBeZ3X8ySIingN2Sao8Q54LPAZsBFaktBXA3Wl7I/CZ1CtqKbC/qrrKzLrAV5efwqeXLnrzSWKexKeXLspdPrWeSnfa0bFxgoPdaTds8+/IdlE0UWfY8g+VTgP+Gngb8DRwKVngWgcsAp4BLo6IFyUJ+M/A+cArwKURMdLo/MPDwzEy0jCLmXWxc667r+Ya3EMD/fyP1R8uoERzg6StETFc61hT1VCSroiIG/PSmhURDwO1CnRujbwBXD6TzzGzucmD8Dqv2WqoFTXSPtvCcpiZNc2D8DqvYbCQdImkHwDHS9pY9bcFeLEzRTQzm8yD8Dovrxrqf5KNZzga+HpV+svA9nYVysyskWanLbfWKaSBu93cwG1mNn2NGribarOQdFGa4G+/pF9JelnSr1pbTDMzK6tmB+X9BfDxiHi8nYUxM7NyarY31PMOFGZmvavhk4Wki9LmiKQ7gQ3Aq5XjEbG+jWUzM7OSyKuG+njV9ivAeVX7AThYmJn1gIbBIiIu7VRBzMysvJqd7uOmGsn7gZGIuLvGMTMzm0Oa7Q31DuAk4Ptp/3eBnwOnSvpQRHyhHYUzs85rZurv6jzz+/uQYOyViTfzgwfMzTVNDcqT9CBwTkQcSPuHAv8A/AawIyJObmspp8mD8sxmpjL199RV6aoXG6qVp1rfIQLBxIGoew4rp1kPygOOAN5ZtX84cGQKHq/WfouZdZvrNz35liAwPnGA6zc92TBPtYk3YlKgqHUO6z7TGZT3sKQfAwI+APxHSYcD/61NZTOzDmtm6u+ZTgPu6cO7W1PBIiJulXQPcFZK+lJE/DJtr2pLycys444b6K+5qFD11N/18jRzbuteeVOUn5RezwCOBXalv19LaWY2hzQz9XetPNUOEfTNU8NzWPfJe7K4EljJ5OnJKwLw+oVmc0gzU39X56n1hDFP4pNnLmTLE/vcG2oO8RTlZjZjXgt7bmnFFOWHSbpK0i1pf4mkj7WykGbWfbwWdu9otuvst4DXgH+Z9keBr7alRGbWNbwWdu9otuvsCRHxSUmXAETEK5KU9yYz6z55o7Or2x5WLTux5iA+N2bPPc0Gi9ck9ZM1aiPpBDwYz2zOmTo6e2x84s1jo2PjrFm/AzjYyO21sHtHs8HiauDvgIWSvgucA3y2XYUys2Lkjc6ujMSe2jvKwWHuazZYrAB+BNwFPA1cEREvtK1UZlaIZhqm3Xjdm5oNFrcC/wr4LeAEYJuk+yPixraVzMzapt7Mss2MznbjdW9qdrqPLZLuB84EPgT8IfDrgIOFWZeZ2i5R3RZRq8G6mhuve1ezix9tJptp9gGyqcnPjIi97SyYmbVHo5llKwPpmu0NZb2j2Wqo7cD7gPeQrZA3JumBiHDlpVmXyRtI5wZrq6WpQXkR8UcR8QHgIuAfyQbpjbWzYGbWHh5IZzPR7HQfn5N0J7ANuBC4DbhgNh8saZ6kbZJ+mPaPl/SQpJ2S7pT0tpT+9rS/Mx1fPJvPNet1zcwsazZVs9N9vAP4BnBSRPxmRPxZRNw3y8++Ani8av9rwA0R8W7gJeCylH4Z8FJKvyHlM7MZWn76ENdedApDA/2IbNI/L3lqeQqZdVbSAmAt8Odk06B/HNgH/FpEvC7p/cA1EbFM0qa0/UBa+/s5YDAaFNyzzpqZTV+jWWebbeButb8E/hR4V9o/ChiLiNfT/m6g8jNniGzBJVIg2Z/ye1CgWZvVG49hvafZaqiWSVOb742IrS0+70pJI5JG9u3b18pTm/WkyniM0bFxgoPjMTZsGy26aFaAjgcLsnmlflvSL4Dvka22dyMwkKqZABaQTYNOel0IkI7PJ+uRNUlE3BIRwxExPDg42N4rMOsBjcZjWO/peLCIiDURsSAiFgOfAu6LiD8AtgCfSNlWAHen7Y1pn3T8vkbtFWbWGl7YyKoV8WRRzxeBKyXtJGuTuDWl3wocldKvBFYXVD6znuLxGFatqAZuACLix8CP0/bTwFk18vw/4Pc6WjCzOa6ZhmsvbGTVCg0WZtZ5jSYSnLpOBXhhI8s4WJj1mEYN11MDgeeJsooytVmYWQe44dpmwsHCrMe44dpmwtVQZiXT7lHTRTVcezR4d3OwMCuRZhufZ6OIhutOXJe1l4OFWYlMp/F5NjrdcN2p67L2cZuFWYnM1cbnuXpdvcTBwqxE5mrj81y9rl7iYGFWInN1Fbu5el29xG0WZiUyV0dNz9Xr6iWFrJTXbl4pz8xs+hqtlOdqKDMzy+VgYWZmudxmYVYiHuVsZeVgYVYSHuVsZeZqKLOS8JrXVmYOFmYl4VHOVmYOFmYl4VHOVmYOFmYl4VHOVmZu4DYrCY9ytjJzsDArEa95bWXlaigzM8vlJwuzDvGAO+tmDhZmHeABd9btXA1l1gEecGfdzsHCrAM84M66nYOFWQd4wJ11OwcLsw7wgDvrdm7gNusAD7izbudgYdYhHnBn3azj1VCSFkraIukxSY9KuiKlHynpXklPpdcjUrok3SRpp6Ttks7odJnNzHpdEW0WrwN/HBEnA0uByyWdDKwGNkfEEmBz2ge4AFiS/lYCN3e+yGZmva3jwSIi9kTET9P2y8DjwBBwIbA2ZVsLLE/bFwLfjsyDwICkYztcbDOznlZobyhJi4HTgYeAYyJiTzr0HHBM2h4CdlW9bXdKm3qulZJGJI3s27evbWU2M+tFhQULSe8E/hb4QkT8qvpYRAQQ0zlfRNwSEcMRMTw4ONjCkpqZWSHBQlIfWaD4bkSsT8nPV6qX0uvelD4KLKx6+4KUZmZmHVJEbygBtwKPR8Q3qg5tBFak7RXA3VXpn0m9opYC+6uqq8zMrAOKGGdxDvBvgB2SHk5pXwKuA9ZJugx4Brg4HbsH+AiwE3gFuLSzxTUzs44Hi4j474DqHD63Rv4ALm9roczMrCHPDWVmZrkcLMzMLJeDhZmZ5XKwMDOzXA4WZmaWy8HCzMxyOViYmVkuBwszM8vlYGFmZrkcLMzMLJeDhZmZ5XKwMDOzXA4WZmaWy8HCzMxyOViYmVkuBwszM8vlYGFmZrkcLMzMLJeDhZmZ5XKwMDOzXA4WZmaWy8HCzMxyOViYmVkuBwszM8vlYGFmZrkcLMzMLJeDhZmZ5XKw6Fbb18EN74FrBrLX7euaO2ZmNgOHFl0Am4Ht6+AHn4eJ8Wx//65sv6Lesfde3Nlymtmc4WAxU9vXweavZF/GmgdxAOYvhHO/nH0p//BK2Hp7ll5RyVcr/5vn2w3zFxxMr2XzVw4Gg4qJ8Sy9sl3rmIOFmc2Qg0W1el/Y29fBf/0ijL+Y5es7HN6YgAOvZfuVgLB/F6xfCfd/HV544q3nr+Srzv+Dz8OzD8LP/qb5p4H9u2uXv1563jEzsxxd02Yh6XxJT0raKWl1yz+gUrWzfxcQB7+wf3glbPj3BwMFwMQ/HQwUbxG1A0U9E+PZE0ijJ4Wp5i+on97omJnZDHVFsJA0D/gr4ALgZOASSSe39EPqVe1svT17imin6qqqavWeBs79MvT1T07r68/SGx0zM5uhbqmGOgvYGRFPA0j6HnAh8FjLPqHeF3O9L/JWqrRhTFXvaaBSNdWojaPZ9g8zsyZ0S7AYAnZV7e8Gzq7OIGklsBJg0aJF0/+E+QtSFdQU9b7IW6WvH079/cltFpX0Rk8D7724fgBodMzMbAa6ohqqGRFxS0QMR8Tw4ODg9E9Qr/rmfZ+FQ/reml/zoP/I2ufq64fj/3WWZ+p7ql/nL4SP3wQf+0b2On8hoIPp/sI3s5LolieLUWBh1f6ClNY6jap2Fi2d3Buq/0i44GsH3zOdbq+NPt/BwcxKShFRdBlySToU+N/AuWRB4ifA70fEo7XyDw8Px8jISAdLaGbW/SRtjYjhWse64skiIl6X9DlgEzAPuK1eoDAzs9brimABEBH3APcUXQ4zs140Zxq4zcysfRwszMwsl4OFmZnl6oreUNMlaR/wzCxPczTwQguKUyRfQzn4GorX7eWHzlzDP4+ImgPV5mSwaAVJI/W6kHULX0M5+BqK1+3lh+KvwdVQZmaWy8HCzMxyOVjUd0vRBWgBX0M5+BqK1+3lh4KvwW0WZmaWy08WZmaWy8HCzMxyOVgAkm6TtFfSI1VpR0q6V9JT6fWIIsuYp841XCNpVNLD6e8jRZaxEUkLJW2R9JikRyVdkdK75j40uIZuug/vkPS/JP0sXcOfpfTjJT0kaaekOyW9reiy1tPgGm6X9POq+3Ba0WVtRNI8Sdsk/TDtF3oPHCwytwPnT0lbDWyOiCXA5rRfZrfz1msAuCEiTkt/ZZ6I8XXgjyPiZGApcHlaZ72b7kO9a4DuuQ+vAh+OiFOB04DzJS0FvkZ2De8GXgIuK7CMeepdA8CqqvvwcHFFbMoVwONV+4XeAwcLICLuB16cknwhsDZtrwWWd7RQ01TnGrpGROyJiJ+m7ZfJ/pMM0UX3ocE1dI3I/N+025f+AvgwcFdKL/t9qHcNXUPSAuCjwF+nfVHwPXCwqO+YiNiTtp8DjimyMLPwOUnbUzVVaatwqklaDJwOPESX3ocp1wBddB9S9cfDwF7gXuD/AGMR8XrKspuSB8Gp1xARlfvw5+k+3CDp7QUWMc9fAn8KvJH2j6Lge+Bg0YTI+hd31S+T5GbgBLJH8T3A14stTj5J7wT+FvhCRPyq+li33Ica19BV9yEiDkTEaWTLF58FnFRwkaZt6jVIeg+whuxazgSOBL5YYBHrkvQxYG9EbC26LNUcLOp7XtKxAOl1b8HlmbaIeD79p3kD+CbZf/zSktRH9iX73YhYn5K76j7UuoZuuw8VETEGbAHeDwyk5Y0h+wIeLaxg01B1DeenasKIiFeBb1He+3AO8NuSfgF8j6z66UYKvgcOFvVtBFak7RXA3QWWZUYqX7LJ7wCP1MtbtFQneyvweER8o+pQ19yHetfQZfdhUNJA2u4Hfous7WUL8ImUrez3odY1PFH1o0Nk9f2lvA8RsSYiFkTEYuBTwH0R8QcUfA88ghuQdAfwQbIpgJ8HrgY2AOuARWTTnV8cEaVtQK5zDR8kq/oI4BfAv6uq/y8VSb8B/AOwg4P1tF8iq/PvivvQ4BouoXvuw3vJGk/nkf2YXBcRX5H0L8h+5R4JbAM+nX6hl06Da7gPGAQEPAz8YVVDeClJ+iDwJxHxsaLvgYOFmZnlcjWUmZnlcrAwM7NcDhZmZpbLwcLMzHI5WJiZWS4HC7MZkNTyLpeSTquekTbNVvsnrf4cs5lwsDArj9OA0k5fbr3NwcJsliStkvSTNEFdZe2ExZIel/TNtKbC36fRxEg6M+V9WNL1kh5JaxN8BfhkSv9kOv3Jkn4s6WlJny/oEs0cLMxmQ9J5wBKyeYZOA94n6QPp8BLgryLi14Ex4HdT+rfIRnGfBhwAiIjXgC8Dd6a1Fu5MeU8ClqXzX53mnjLrOAcLs9k5L/1tA35K9uW+JB37edUCO1uBxWnOondFxAMp/W9yzv+jiHg1Il4gm0SxK6Zot7nn0PwsZtaAgGsj4r9MSszWs6iet+cA0D+D8089h//PWiH8ZGE2O5uAf5vWsEDSkKR/Vi9zmjL7ZUlnp6RPVR1+GXhX20pqNgsOFmazEBF/T1aV9ICkHWTLXuZ94V8GfDOt5HY4sD+lbyFr0K5u4DYrBc86a9Zhkt5ZmRpb0mrg2Ii4ouBimTXk+k+zzvuopDVk//+eAT5bbHHM8vnJwszMcrnNwszMcjlYmJlZLgcLMzPL5WBhZma5HCzMzCzX/wd4l77paWhIEwAAAABJRU5ErkJggg==\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "빙어와 도미의 산점도 그래프 모두 선형적이다. <br> 빙어도 도미와 비슷하게 길이와 무게가 비례하지만 늘어나는 정도가 조금 다르기 때문에 무게가 길이에 영향을 덜 받는다고 볼 수 있다.\n",
        "<br><br>\n",
        "\n",
        "---\n"
      ],
      "metadata": {
        "id": "MF6aj-Mj8-Jk"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "본격적으로 머신러닝 프로그램을 만들기 전에 두 생선의 데이터를 합쳐야한다."
      ],
      "metadata": {
        "id": "yb5_vrXL9pqR"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "length = bream_length + smelt_length\n",
        "weight = bream_weight + smelt_weight\n",
        "\n",
        "print('length:', length[:10])\n",
        "print('weight:', weight[:10])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "php2om5f85Ia",
        "outputId": "a23d7ad1-b0ca-46fa-ac20-daddd3d1f907"
      },
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "length: [25.4, 26.3, 26.5, 29.0, 29.0, 29.7, 29.7, 30.0, 30.0, 30.7]\n",
            "weight: [242.0, 290.0, 340.0, 363.0, 430.0, 450.0, 500.0, 390.0, 450.0, 500.0]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "현재는 1차원 리스트의 형태이다. 하지만 머신러닝 패키지인 사이킷런을 사용하려면 각 특성의 리스트를 2차원 리스트로 만들어야 한다. <br>\n",
        "[(특성1, 특성2), ...] 형태로 만들어야한다. → zip 함수와 list comprehension 사용"
      ],
      "metadata": {
        "id": "n6oe_zMJ-BKx"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "fish_data = [[length, weight] for length, weight in zip(length, weight)]\n",
        "fish_data[:10]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "GubsaJnr92aj",
        "outputId": "c3854894-5b3a-4f7a-80e5-df901a90accf"
      },
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[[25.4, 242.0],\n",
              " [26.3, 290.0],\n",
              " [26.5, 340.0],\n",
              " [29.0, 363.0],\n",
              " [29.0, 430.0],\n",
              " [29.7, 450.0],\n",
              " [29.7, 500.0],\n",
              " [30.0, 390.0],\n",
              " [30.0, 450.0],\n",
              " [30.7, 500.0]]"
            ]
          },
          "metadata": {},
          "execution_count": 19
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "데이터를 필요한 형태로 만들었고 머신러닝 알고리즘이 생선을 구분하는 규칙을 학습하기 위해서는 정답 데이터가 필요하다. <br>때문에 0, 1로 구성된 정답 레이블을 만들어줘야한다."
      ],
      "metadata": {
        "id": "jEW5nw1QAc9z"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# 0: 빙어, 1: 도미(target)\n",
        "fish_target = [1] * 35 + [0] * 14"
      ],
      "metadata": {
        "id": "JlwvOxyzBCgD"
      },
      "execution_count": 29,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "---"
      ],
      "metadata": {
        "id": "XYYdL_rcCrQC"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "이제 k-최근접 이웃 알고리즘(k-Nearest Neighbors)을 구현해보자"
      ],
      "metadata": {
        "id": "nVjMhSmVCtOT"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# 필요한 클래스 import하기\n",
        "from sklearn.neighbors import KNeighborsClassifier"
      ],
      "metadata": {
        "id": "4HVzt89Y_JG9"
      },
      "execution_count": 31,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# 필요 클래스의 객체 생성\n",
        "kn = KNeighborsClassifier()"
      ],
      "metadata": {
        "id": "-mE-a3xcDPZY"
      },
      "execution_count": 32,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "이제 데이터를 이용하여 머신러닝 알고리즘 모델을 훈련시켜보자.<br>사이킷런에서는 fit() 메서드가 모델에 데이터를 학습시키고 훈련시키는 역할을 함\n",
        "\n",
        "> 훈련(training)<br>\n",
        "모델에 데이터를 전달하여 규칙을 학습하는 과정"
      ],
      "metadata": {
        "id": "uGORu19NFmAP"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "kn.fit(fish_data, fish_target)  # 학습 데이터, 정답 데이터 순으로 입력함"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "KfIpr-G5FguM",
        "outputId": "549d8765-8f80-44f4-c220-fcb275971e16"
      },
      "execution_count": 33,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "KNeighborsClassifier()"
            ]
          },
          "metadata": {},
          "execution_count": 33
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "학습을 시켰으니 모델이 얼마나 잘 훈련 되었는지 평가를 해보자.<br>\n",
        "모델을 평가할 때는 score() 메서드를 사용하며 이 메서드는 0 ~ 1 사이의 값을 반환한다.\n",
        "\n",
        "> 정확도(accuracy)<br>\n",
        "평가 메서드를 이용하여 반환된 값(0 ~ 1)"
      ],
      "metadata": {
        "id": "h23Fpce9GuGr"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "kn.score(fish_data, fish_target)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "tmLkKb5fGerA",
        "outputId": "c955504b-25fa-45ad-e86f-461c5672bbfc"
      },
      "execution_count": 34,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1.0"
            ]
          },
          "metadata": {},
          "execution_count": 34
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "---\n",
        "<br>\n",
        "\n",
        "* k-Nearest Neighbors Algorithm<br>\n",
        "어떤 데이터에 대한 답을 구할 때 주의의 다른 데이터를 보고 다수를 차지하는 것을 정답으로 사용한다.\n",
        "    - 장점: 새로운 데이터를 예측 할 때 가장 가까운 직선거리에 어떤 데이터가 있는지만 알면 됨\n",
        "    - 단점: 데이터가 아주 많은 경우, 메모리가 많이 필요하고 직선거리를 계산하는데 오래걸림\n",
        "\n"
      ],
      "metadata": {
        "id": "49ZLnTe7IECp"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "이 모델이 길이가 30, 무게가 600인 생선을 무엇으로 예측할지 알아보자."
      ],
      "metadata": {
        "id": "M3hPCQzcJirl"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# predict(): 새로운 데이터의 정답을 예측\n",
        "kn.predict([[30, 600]])   # 훈련시킨 데이터의 형태와 같아야함에 주의!"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1pQ1abFCHf8p",
        "outputId": "15928199-345b-46c6-b3b4-5c3ed054c74e"
      },
      "execution_count": 36,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([1])"
            ]
          },
          "metadata": {},
          "execution_count": 36
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.scatter(bream_length, bream_weight)\n",
        "plt.scatter(smelt_length, smelt_weight)\n",
        "plt.scatter(30, 600, marker='^', color='red')\n",
        "plt.title('Add New Data')\n",
        "plt.xlabel('length')\n",
        "plt.ylabel('weight')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 295
        },
        "id": "CjSxOCUgOMbY",
        "outputId": "0bf152cd-ffc8-4f8b-c822-7e10b1f3cb6c"
      },
      "execution_count": 47,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "KNeighborsClassifier 클래스 안을 살펴보면 우리가 준 데이터들(fish_data, fish_target)을 모두 가지고 있다. <br>즉, 실제로 모델이 훈련되는 것이 아니라, fit() 메서드에 전달된 데이터를 모두 저장하고 있다가 새로운 데이터가 등장하면 가장 가까운 데이터를 참고하여 결과값을 반환한다.<br> 참고하는 데이터의 개수는 기본 5개이며 `n_neighbors` 매개변수를 이용하여 변경 가능하다."
      ],
      "metadata": {
        "id": "RhuR9v2oKoH1"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print(kn._fit_X[:10])   # 학습 데이터\n",
        "print(kn._y[:10])       # 정답 데이터"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "v0PvmC9YJrjR",
        "outputId": "130054da-d6a4-4555-c9b0-a7a7a96e64ab"
      },
      "execution_count": 39,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[ 25.4 242. ]\n",
            " [ 26.3 290. ]\n",
            " [ 26.5 340. ]\n",
            " [ 29.  363. ]\n",
            " [ 29.  430. ]\n",
            " [ 29.7 450. ]\n",
            " [ 29.7 500. ]\n",
            " [ 30.  390. ]\n",
            " [ 30.  450. ]\n",
            " [ 30.7 500. ]]\n",
            "[1 1 1 1 1 1 1 1 1 1]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "kn49 = KNeighborsClassifier(n_neighbors=49) # 참고 데이터를 49개로 한 모델"
      ],
      "metadata": {
        "id": "nIUXA1xOMCEN"
      },
      "execution_count": 40,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "예를 들어, 새로운 데이터를 중심으로 가장 가까이 있는 5개의 데이터가 도미 3개/ 빙어 2개라면 새로운 데이터를 도미로 예측하는 것이다.<br> 만약 가까운 49개의 데이터를 참고하여 새로운 데이터를 예측한다면 전체 데이터를 참고한다는 뜻이 된다. 이때, 전체 데이터는 도미 35개/빙어 14개이므로 무조건 새로운 데이터를 도미라고 예측하는 결과가 발생한다.\n",
        "\n",
        "<br>kn49 모델은 도미인 데이터일 경우에만 정답을 맞추기 때문에 아래와 같은 정확도가 발생하는 것이다."
      ],
      "metadata": {
        "id": "yZUG2YY6M1Xh"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "kn49.fit(fish_data, fish_target)\n",
        "kn49.score(fish_data, fish_target)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "X7PrPiGQM0-4",
        "outputId": "e5b38508-584a-4e02-de85-6e017a9a7e0d"
      },
      "execution_count": 43,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.7142857142857143"
            ]
          },
          "metadata": {},
          "execution_count": 43
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(35/49)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "U09CQHU0NyL2",
        "outputId": "e0c0e7dc-7e7b-473f-e5d4-08f478ee2813"
      },
      "execution_count": 44,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0.7142857142857143\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "aTcjC28fNguF"
      }
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "W3v6nQ-yNd-4"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}